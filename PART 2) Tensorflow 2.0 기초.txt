2-02 TensorFlow 기초 사용법
Tensor 생성 list -> Tensor / array->Tensor
tf.constant([1, 2, 3])
데이터 타입 적용 : tf.constant([1, 2, 3],dtype=tf.float32)
데이터 타입 변환 : tf.cast(tensor, dtype = tf.uInt8)
tf.random.normal([3, 3])
tf.random.uniform([4, 4])
Data Preprocess(MNIST)
from tensorflow.keras import datasets
mnist = datasets.mnist
(tranin_x, train_y), (test_x, test_y) = mnist.load_data()
image = train_x[0] //데이터 하나만 뽑기
image.shape 
plt.imshow(image, ‘gray’) //시각화
plt.show()
Channel 관련
차원수 늘리기 : new_train_x = np.expand_dims(train_x, -1) # 맨뒤에 1붙이기
new_train_x.shape
disp = new_train_x[0, :, :, 0] / disp = np.squeeze(new_train_x[0])
disp.shape	#결과 : (28, 28) shape를 줄이기
원 핫 인코딩 : 컴퓨터가 이해할 수 있는 형태로 변환해서 label을 주도록 함.
from tensorflow.keras.utils import to_categorical
Layer Explaination
Input image
-os, glob, matplotlib
kernel_size: filter(weight)의 사이즈
strides : 몇 개의 pixel을 skip하면서 훑어 지날지
padding : zero padding만들건지 ,VALID 는 padding 없고, SAME은 padding 있다.
activation: activation function만들건지
Visualization
output = layer(image)
pooling : 이미지가 줄어든다. 
tf.keras.layers.MaxPool2D(pool_size=(2, 2), strides=(2, 2), padding='SAME')

Fully Connected : y = wx+b
flatten
Optimization & Training(Beginner)(모델 학습)
from tensorflow.keras import layers
from tensorflow.keras import datasets
crossentropy : 2개 -> binary_crossentropy / 2개 이상 : categorical_crossentropy
원핫인코딩을 주지 않았을 때 : sparse_categorical_crossentropy
원핫인코딩을 주었을 때 : categorical_crossentropy
Compile – Optimizer 적용

모델 평가 : accuracy를 이름으로 넣기

Training : 학습용 Hyperparameter 설정 
epoch ->데이터를 하나씩 보는데 다 보면 한 epoch
batch_size만큼 한 모델에 넣어줘야함.(메모리의 효율 위해)
model.fit(train_x, train_y, 
          batch_size=batch_size, 
          shuffle=True, 
          epochs=num_epochs)
   
 
에폭당 로그 hist.history
Evaluating ( 비교 대상이 있다.)
model.evaluate(test_x, test_y, batch_size = batch_size)
모델의 Input Data로 확인 할 이미지 데이터 넣기
pred = model.predict(test_image.reshape(1, 28, 28, 1))
pred.shape ->(1, 10)
노드가 가장 높은 자극을 받은 것이 정답
pred가 가장 높은값 np.argmax(pred)
Test Batch->이미지를 테스트 배치로 넣기 (예측만 하기)
test_batch = test_x[:32]
test_batch.shape
preds = model.predict(test_batch)
preds.shape
np.argmax(preds, -1)
